#!/usr/bin/env node
"use strict"; function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
// src/index.ts
var _fsextra = require('fs-extra');
var _imagesize = require('image-size');
var _meow = require('meow'); var _meow2 = _interopRequireDefault(_meow);
var _sharp = require('sharp'); var _sharp2 = _interopRequireDefault(_sharp);
var ICON_SIZE_DELIMITER = ",";
var MIN_ACCEPT_IMAGE_RESOLUTION = 512;
var DEFAULT_INPUT_ICON_PATH = "public/favicon.svg";
var DEFAULT_INPUT_MANIFEST_PATH = "public/site.webmanifest";
var DEFAULT_OUTPUT_PATH = "public";
var DEFAULT_OUTPUT_SIZES = "180, 192, 512";
async function run() {
  const {flags} = _meow2.default.call(void 0, `
  Usage
    $ webmanifest --icon <file>

  Options
    --icon       Template icon file
    --manifest   Template webmanifest file
    --output     Output directory path

  Examples
    $ webmanifest --help
    $ webmanifest --icon public/icon.svg --manifest public/site.webmanifest
  `, {
    flags: {
      icon: {
        type: "string",
        default: DEFAULT_INPUT_ICON_PATH
      },
      manifest: {
        type: "string",
        default: DEFAULT_INPUT_MANIFEST_PATH
      },
      output: {
        type: "string",
        default: DEFAULT_OUTPUT_PATH
      },
      sizes: {
        type: "string",
        default: DEFAULT_OUTPUT_SIZES
      }
    }
  });
  if (!await _fsextra.pathExists.call(void 0, flags.icon)) {
    throw new Error(`${flags.icon} does not exists.`);
  }
  if (!await _fsextra.pathExists.call(void 0, flags.manifest)) {
    throw new Error(`${flags.manifest} does not exists.`);
  }
  if (!await _fsextra.pathExists.call(void 0, flags.output)) {
    throw new Error(`${flags.output} does not exists.`);
  }
  const iconRectangle = _imagesize.imageSize.call(void 0, flags.icon);
  if (!iconRectangle.width || !iconRectangle.height) {
    throw new Error("Icon file is invalid.");
  }
  if (iconRectangle.width !== iconRectangle.height) {
    throw new Error("Icon file is required its square.");
  }
  if (!flags.icon.endsWith(".svg")) {
    if (iconRectangle.width < MIN_ACCEPT_IMAGE_RESOLUTION) {
      throw new Error(`Icon file width is required larger than ${MIN_ACCEPT_IMAGE_RESOLUTION}px.`);
    }
    if (iconRectangle.height < MIN_ACCEPT_IMAGE_RESOLUTION) {
      throw new Error(`Icon file height is required larger than ${MIN_ACCEPT_IMAGE_RESOLUTION}px.`);
    }
  }
  const outputSizes = flags.sizes.includes(ICON_SIZE_DELIMITER) ? flags.sizes.split(ICON_SIZE_DELIMITER).map(Number).filter(Number) : [Number(flags.sizes)].filter(Number);
  for (const size of outputSizes) {
    const padding = Math.floor(size / 6);
    const content = Math.floor(size - padding * 2);
    const output = `${flags.output}/icon-x${size}.png`;
    await _sharp2.default.call(void 0, flags.icon, {density: 2400}).resize(content, content).flatten({background: "#fff"}).extend({
      background: "#fff",
      top: padding,
      left: padding,
      bottom: padding,
      right: padding
    }).png().toFile(output);
    console.log(`Output icon: ${output}`);
  }
  const inputManifest = await _fsextra.readJSON.call(void 0, flags.manifest);
  const outputManifestContent = {
    ...inputManifest,
    icons: outputSizes.map((size) => ({
      src: `icon-x${size}.png`,
      sizes: `${size}x${size}`,
      type: "image/png"
    }))
  };
  await _fsextra.writeJSON.call(void 0, flags.manifest, outputManifestContent, {spaces: 2});
  console.log(`Output webmanifest: ${flags.manifest}`);
  console.log("\n\u{1F389} All process successfully done.\n");
}
run();
